h1 {
  font-size: 18px;
  border-bottom: 1px solid;
  padding: 8px 16px;
  margin-bottom: 16px;
}

dl {
  margin: 0; /* デフォルトで入る余白を削除 */
}

dl > div {
  margin-bottom: 8px;
}

dt {
  padding: 8px;
  cursor: pointer;
  user-select: none;
  /* 文字を連続クリックすると文字選択されてしまうため、
  そうならないようにUXを改善。 */
  position: relative;
  /* この要素内に配置する
  ::after を絶対位置でコントロールできるように。 */
}

dt::before {
  content: 'Q. ';
  /* dtの先頭に追加 */
}

dt::after {
  content: '+';
  /* dtの末尾に追加 */
  position: absolute;
  top: 8px;
  right: 16px;
  /* dtを基準に、上から8px・右から16pxに配置。 */
  transition: transform .3s;
  /* なぜtransition？
    → もともと表示されている要素（＋ボタン）に対して、
    「変化が起きたときだけ」なめらかに変化させたい場合は
    transitionで十分。ここでは「回転」だけなので、
    軽量かつ扱いやすいtransitionを使う。 */
}

dl > div.appear dt::after {
  transform: rotate(45deg);
}

dd {
  padding: 8px;
  margin: 0;
  display: none;
}

dd::before {
  content: 'A .';
}

dl > div.appear dd {
  display: block;
  animation: .3s fadeIn; /* keyflamesとセットで */
}

@keyframes fadeIn {
  0% {
    opacity: 0;
    transform: translateY(-10px);
  }
  100% {
    opacity: 1;
    transform: none;
  }
  /* 透明（0）から徐々に不透明（1）になる
  ＝フェードイン効果 */
  /* なぜkeyframes？
    → 回答部分（dd）は初期状態がdisplay: none。
    transition は「表示されたあとの変化」しか扱えないため、
    表示トリガーとアニメーションを同時に扱うには
    keyframes（animation）が必要になる。

    つまり、「表示されていない → 表示される」変化に
    アニメーションをかけたい時は、keyframesじゃないとダメ。
　*/
}